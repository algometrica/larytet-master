#summary Interactive Brokers API

= General =

  * http://www.dinosaurtech.com/utilities/
  * http://ibcsharp.codeplex.com/
  * Java http://www.interactivebrokers.com/en/p.php?f=programInterface
  * http://www.interactivebrokers.com/download/JavaAPIGettingStarted.pdf Java getting started
  * http://www.interactivebrokers.com/download/newMark/PDFs/APIprintable.pdf  Reference guide
  * http://www.bearcave.com/software/market_trading/resources_and_notes/ - documentation

= Matlab =

mathworks.com/matlabcentral/fileexchange/29434


TWS (default port 7496)
<code>
java -cp jts.jar:hsqldb.jar:jcommon-1.0.12.jar:jfreechart-1.0.9.jar:jhall.jar:other.jar:rss.jar -Xmx512M jclient.LoginFrame .
</code>

<br>
<br>

Gateway (default port 4001)
<code>
java -cp jts.jar:hsqldb.jar:jcommon-1.0.12.jar:jhall.jar:other.jar:rss.jar -Dsun.java2d.noddraw=true -Xmx512M ibgateway.GWClient .
</code>

<br>
<br>

Demo client

<code>
java -jar jtsclient.jar
</code>


= Docs =

Protocol:
  * Similar to FIX field delimiter is a zero byte. 
  * All arguments are ASCII strings
  * First argument is always message identifier, for example REQ_MKT_DATA (1)
  * Second argument is version (always 1?)
  * Rest of the arguments is message specific - tickerId, etc

In the file EReader.java read looks like this
<code>
    protected String readStr() throws IOException {
        StringBuffer buf = new StringBuffer();
        while( true) {
            byte c = m_dis.readByte();
            if( c == 0) {
                break;
            }
            buf.append( (char)c);
        }

        String str = buf.toString();
        return str.length() == 0 ? null : str;
    }
</code>

Send looks like this
<code>
    protected void send( String str) throws IOException {
        // write string to data buffer; writer thread will
        // write it to socket
        if( !IsEmpty(str)) {
            m_dos.write( str.getBytes() );
        }
        sendEOL();
    }

    private void sendEOL() throws IOException {
        m_dos.write( EOL);
    }
</code>

There is apparently a limitation of ~50 message/seconds. There is no immediate reason to make the code more efficient. However we have this rather inefficient implementation. 


API is asynchronous. See interface EWrapper for required methods.